#!/usr/bin/python3
"""
Unittest for matrix_mul([..], [..])
"""

import doctest
from io import StringIO
import sys

# Import the matrix_mul function from 100-matrix_mul.py
matrix_mul = __import__('100-matrix_mul').matrix_mul

def run_tests():
    """
    Run the matrix_mul function with various test cases.
    """
    # Test case 1: Multiply two matrices of compatible dimensions
    matrix_a = [[1, 2], [3, 4]]
    matrix_b = [[1, 2], [3, 4]]
    expected_result = [[7, 10], [15, 22]]
    assert matrix_mul(matrix_a, matrix_b) == expected_result

    # Test case 2: Multiply two matrices of different dimensions (not compatible)
    matrix_a = [[1, 2]]
    matrix_b = [[3, 4], [5, 6]]
    # The matrices cannot be multiplied, expect a ValueError
    try:
        matrix_mul(matrix_a, matrix_b)
    except ValueError as ve:
        assert str(ve) == "m_a and m_b can't be multiplied"

    # Test case 3: Multiply matrices with non-integer or non-float elements
    matrix_a = [[1, 2], [3, "four"]]
    matrix_b = [["five", 6], [7, 8]]
    # The matrices contain non-integer/non-float elements, expect a TypeError
    try:
        matrix_mul(matrix_a, matrix_b)
    except TypeError as te:
        assert str(te) == "m_a should contain only integers or floats"

    # Test case 4: Multiply an empty matrix
    matrix_a = [[]]
    matrix_b = [[1, 2], [3, 4]]
    # One of the matrices is empty, expect a ValueError
    try:
        matrix_mul(matrix_a, matrix_b)
    except ValueError as ve:
        assert str(ve) == "m_a can't be empty"
